{"remainingRequest":"C:\\dialogflow-web-v2-master\\node_modules\\babel-loader\\lib\\index.js!C:\\dialogflow-web-v2-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\dialogflow-web-v2-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\dialogflow-web-v2-master\\src\\App.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\dialogflow-web-v2-master\\src\\App.vue","mtime":1612196699000},{"path":"C:\\dialogflow-web-v2-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\dialogflow-web-v2-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\dialogflow-web-v2-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\dialogflow-web-v2-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6YA,OAAA,WAAA,MAAA,yBAAA;AAEA,OAAA,YAAA,MAAA,+BAAA;AACA,OAAA,OAAA,MAAA,0BAAA;AACA,OAAA,aAAA,MAAA,gCAAA;AACA,OAAA,SAAA,MAAA,4BAAA;AAEA,OAAA,aAAA,MAAA,gCAAA;AACA,OAAA,UAAA,MAAA,6BAAA;AACA,OAAA,QAAA,MAAA,2BAAA;AACA,OAAA,cAAA,MAAA,iCAAA;AACA,OAAA,YAAA,MAAA,+BAAA;AACA,OAAA,QAAA,MAAA,2BAAA;AACA,OAAA,YAAA,MAAA,+BAAA;AACA,OAAA,WAAA,MAAA,8BAAA;AACA,OAAA,SAAA,MAAA,4BAAA;AACA,OAAA,aAAA,MAAA,gCAAA;AACA,OAAA,aAAA,MAAA,iCAAA;AAEA,OAAA,KAAA,MAAA,MAAA,SAAA;AAEA,SAAA,MAAA,QAAA,oBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,KADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,WAAA,EAAA,WADA;AAEA,IAAA,YAAA,EAAA,YAFA;AAGA,IAAA,OAAA,EAAA,OAHA;AAIA,IAAA,aAAA,EAAA,aAJA;AAKA,IAAA,SAAA,EAAA,SALA;AAMA,IAAA,aAAA,EAAA,aANA;AAOA,IAAA,UAAA,EAAA,UAPA;AAQA,IAAA,QAAA,EAAA,QARA;AASA,IAAA,cAAA,EAAA,cATA;AAUA,IAAA,YAAA,EAAA,YAVA;AAWA,IAAA,QAAA,EAAA,QAXA;AAYA,IAAA,YAAA,EAAA,YAZA;AAaA,IAAA,WAAA,EAAA,WAbA;AAcA,IAAA,SAAA,EAAA,SAdA;AAeA,IAAA,aAAA,EAAA,aAfA;AAgBA,IAAA,aAAA,EAAA;AAhBA,GAFA;AAoBA,EAAA,IApBA,kBAoBA;AACA,WAAA;AACA,MAAA,KAAA,EAAA,IADA;AAEA,MAAA,QAAA,EAAA,EAFA;AAGA,MAAA,QAAA,EAAA,EAHA;AAIA,MAAA,OAAA,EAAA,EAJA;AAKA,MAAA,KAAA,EAAA,IALA;AAMA,MAAA,OAAA,EAAA,KANA;AAOA,MAAA,KAAA,EAAA,IAPA;AAQA,MAAA,MAAA,EAAA,IAAA,MAAA,CAAA,KAAA,MAAA,CAAA,QAAA,CARA;AASA,MAAA,KAAA,EAAA,IAAA,KAAA;AATA,KAAA;AAWA,GAhCA;AAiCA,EAAA,QAAA,EAAA;AACA;AACA,IAAA,WAFA,yBAEA;AAAA;;AACA,UAAA,KAAA,QAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AAAA;AACA,cAAA,YAAA,GAAA,KAAA,CAAA,QAAA,CAAA,KAAA,CAAA,QAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AACA,cAAA,gBAAA,GAAA,EAAA;AACA,cAAA,gBAAA,GAAA,EAAA;AAEA;;AACA,eAAA,IAAA,SAAA,IAAA,YAAA,CAAA,WAAA,CAAA,mBAAA,EAAA;AACA,gBAAA,YAAA,CAAA,WAAA,CAAA,mBAAA,CAAA,SAAA,EAAA,WAAA,EAAA,gBAAA,CAAA,IAAA,OAAA,gBAAA,qBAAA,YAAA,CAAA,WAAA,CAAA,mBAAA,CAAA,SAAA,EAAA,WAAA,CAAA,WAAA,CAAA,GAAA,CAAA,UAAA,UAAA;AAAA,qBAAA,UAAA,CAAA,KAAA;AAAA,aAAA,CAAA,EAAA;AACA,gBAAA,YAAA,CAAA,WAAA,CAAA,mBAAA,CAAA,SAAA,EAAA,iBAAA,EAAA,gBAAA,CAAA,IAAA,CAAA,YAAA,CAAA,WAAA,CAAA,mBAAA,CAAA,SAAA,EAAA,iBAAA;AACA,gBAAA,YAAA,CAAA,WAAA,CAAA,mBAAA,CAAA,SAAA,EAAA,YAAA,EAAA,gBAAA,CAAA,IAAA,OAAA,gBAAA,qBAAA,YAAA,CAAA,WAAA,CAAA,mBAAA,CAAA,SAAA,EAAA,YAAA,CAAA,YAAA,EAAA;;AACA,gBAAA,YAAA,CAAA,WAAA,CAAA,mBAAA,CAAA,SAAA,EAAA,OAAA,IAAA,YAAA,CAAA,WAAA,CAAA,mBAAA,CAAA,SAAA,EAAA,OAAA,CAAA,WAAA,EAAA;AACA,cAAA,YAAA,CAAA,WAAA,CAAA,mBAAA,CAAA,SAAA,EAAA,OAAA,CAAA,WAAA,CAAA,OAAA,CAAA,UAAA,KAAA,EAAA;AACA,oBAAA,KAAA,GAAA,KAAA,CAAA,IAAA,CAAA,UAAA,IAAA;AAAA,yBAAA,IAAA,CAAA,IAAA,IAAA,OAAA;AAAA,iBAAA,CAAA;AACA,oBAAA,KAAA,EAAA,gBAAA,CAAA,IAAA,OAAA,gBAAA,qBAAA,KAAA,CAAA,OAAA,EAAA;AACA,eAHA;AAIA;AACA;AAEA;;;AACA,cAAA,YAAA,CAAA,WAAA,CAAA,cAAA,IAAA,YAAA,CAAA,WAAA,CAAA,cAAA,CAAA,MAAA,EAAA;AACA,iBAAA,IAAA,UAAA,IAAA,YAAA,CAAA,WAAA,CAAA,cAAA,CAAA,MAAA,EAAA;AACA,kBAAA,YAAA,CAAA,WAAA,CAAA,cAAA,CAAA,MAAA,CAAA,UAAA,EAAA,WAAA,EAAA,gBAAA,CAAA,IAAA,OAAA,gBAAA,qBAAA,YAAA,CAAA,WAAA,CAAA,cAAA,CAAA,MAAA,CAAA,UAAA,EAAA,WAAA,CAAA,GAAA,CAAA,UAAA,UAAA;AAAA,uBAAA,UAAA,CAAA,KAAA;AAAA,eAAA,CAAA,EAAA;AACA,kBAAA,YAAA,CAAA,WAAA,CAAA,cAAA,CAAA,MAAA,CAAA,UAAA,EAAA,iBAAA,EAAA,gBAAA,CAAA,IAAA,CAAA,YAAA,CAAA,WAAA,CAAA,cAAA,CAAA,MAAA,CAAA,UAAA,EAAA,iBAAA;AACA;AACA;;AAEA;AAAA,eAAA;AAAA,cAAA,gBAAA,EAAA,gBAAA;AAAA,cAAA,gBAAA,EAAA;AAAA;AAAA;AA1BA;;AAAA;AA2BA;;AAEA,aAAA;AACA,QAAA,gBAAA,EAAA,KAAA,MAAA,CAAA,iBADA,CACA;;AADA,OAAA;AAGA;AAnCA,GAjCA;AAsEA,EAAA,KAAA,EAAA;AACA;AACA,IAAA,QAFA,oBAEA,SAFA,EAEA;AACA,UAAA,KAAA,OAAA,EAAA,EAAA,cAAA,CAAA,OAAA,CAAA,iBAAA,EAAA,IAAA,CAAA,SAAA,CAAA,SAAA,CAAA,EADA,CACA;AACA,KAJA;;AAKA;AACA,IAAA,OANA,qBAMA;AACA,MAAA,UAAA,CAAA,YAAA;AACA,YAAA,GAAA,GAAA,QAAA,CAAA,aAAA,CAAA,MAAA,CAAA,CADA,CACA;;AACA,YAAA,GAAA,CAAA,aAAA,CAAA,UAAA,CAAA,EAAA;AACA,cAAA,OAAA,GAAA,GAAA,CAAA,gBAAA,CAAA,UAAA,EAAA,GAAA,CAAA,gBAAA,CAAA,UAAA,EAAA,MAAA,GAAA,CAAA,EAAA,SAAA,GAAA,EAAA;AACA,UAAA,MAAA,CAAA,QAAA,CAAA;AAAA,YAAA,GAAA,EAAA,OAAA;AAAA,YAAA,QAAA,EAAA;AAAA,WAAA;AACA;AACA,OANA,EAMA,CANA,CAAA,CADA,CAOA;AACA,KAdA;;AAeA;AACA,IAAA,KAhBA,iBAgBA,MAhBA,EAgBA;AACA,WAAA,KAAA,CAAA,KAAA,GAAA,MAAA;AACA,UAAA,MAAA,EAAA,KAAA,aAAA;AACA;AAnBA,GAtEA;AA2FA,EAAA,OA3FA,qBA2FA;AAAA;;AACA;AACA,QAAA,KAAA,OAAA,MAAA,cAAA,CAAA,OAAA,CAAA,iBAAA,MAAA,IAAA,EAAA;AACA,WAAA,QAAA,GAAA,IAAA,CAAA,KAAA,CAAA,cAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA;AACA;AAEA;;;AACA,QAAA,KAAA,OAAA,MAAA,cAAA,CAAA,OAAA,CAAA,SAAA,MAAA,IAAA,EAAA;AACA,WAAA,OAAA,GAAA,cAAA,CAAA,OAAA,CAAA,SAAA,CAAA;AACA,KAFA,MAIA;AACA,WAAA,OAAA,GAAA,MAAA,EAAA;AACA,UAAA,KAAA,OAAA,EAAA,EAAA,cAAA,CAAA,OAAA,CAAA,SAAA,EAAA,KAAA,OAAA;AACA;AAEA;;;AACA,QAAA,KAAA,OAAA,MAAA,cAAA,CAAA,OAAA,CAAA,OAAA,MAAA,IAAA,EAAA;AACA,WAAA,KAAA,GAAA,IAAA,CAAA,KAAA,CAAA,cAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;AACA,KAFA,MAIA;AACA,WAAA,MAAA,CAAA,GAAA,GACA,IADA,CACA,UAAA,KAAA,EAAA;AACA,QAAA,MAAA,CAAA,KAAA,GAAA,KAAA;AACA,YAAA,MAAA,CAAA,OAAA,EAAA,EAAA,cAAA,CAAA,OAAA,CAAA,OAAA,EAAA,IAAA,CAAA,SAAA,CAAA,KAAA,CAAA;AACA,OAJA,EAKA,KALA,CAKA,UAAA,KAAA,EAAA;AACA,QAAA,MAAA,CAAA,KAAA,GAAA,KAAA,CAAA,OAAA;AACA,OAPA;AAQA;AACA,GA1HA;AA2HA,EAAA,OAAA,EAAA;AACA,IAAA,IADA,gBACA,UADA,EACA;AAAA;;AACA,UAAA,OAAA;AAEA;;AACA,UAAA,UAAA,CAAA,IAAA,EAAA;AACA,QAAA,OAAA,GAAA;AACA,UAAA,OAAA,EAAA,KAAA,OADA;AAEA,UAAA,UAAA,EAAA;AACA,YAAA,IAAA,EAAA;AACA,cAAA,IAAA,EAAA,UAAA,CAAA,IADA;AAEA,cAAA,YAAA,EAAA,KAAA,IAAA;AAFA;AADA;AAFA,SAAA;AASA;AAEA;AAZA,WAaA,IAAA,UAAA,CAAA,KAAA,EAAA;AACA,eAAA,KAAA,GAAA,KAAA;AAEA,UAAA,OAAA,GAAA;AACA,YAAA,OAAA,EAAA,KAAA,OADA;AAEA,YAAA,UAAA,EAAA;AACA,cAAA,WAAA,EAAA;AACA,gBAAA,aAAA,EAAA,4BADA;AAEA,gBAAA,YAAA,EAAA,KAAA,IAAA;AAFA;AADA,aAFA;AAQA,YAAA,UAAA,EAAA,UAAA,CAAA;AARA,WAAA;AAUA;;AAEA,WAAA,aAAA;AACA,WAAA,OAAA,GAAA,IAAA;AACA,WAAA,KAAA,GAAA,IAAA;AAEA;;AACA,WAAA,MAAA,CAAA,IAAA,CAAA,OAAA,EACA,IADA,CACA,UAAA,QAAA,EAAA;AACA,QAAA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,QAAA;;AACA,QAAA,MAAA,CAAA,MAAA,CAAA,QAAA,EAFA,CAEA;;;AACA,YAAA,MAAA,CAAA,KAAA,EAAA,EAAA,OAAA,CAAA,GAAA,CAAA,QAAA,EAHA,CAGA;AACA,OALA,EAMA,KANA,CAMA,UAAA,KAAA,EAAA;AACA,QAAA,MAAA,CAAA,KAAA,GAAA,KAAA,CAAA,OAAA;AACA,OARA,EASA,IATA,CASA;AAAA,eAAA,MAAA,CAAA,OAAA,GAAA,KAAA;AAAA,OATA;AAUA,KAhDA;AAiDA,IAAA,MAjDA,kBAiDA,QAjDA,EAiDA;AAAA;;AACA;AACA,UAAA,QAAA,CAAA,WAAA,CAAA,cAAA,IAAA,QAAA,CAAA,WAAA,CAAA,cAAA,CAAA,gBAAA,EAAA;AACA,aAAA,KAAA,CAAA,KAAA,CAAA,QAAA,GAAA,IAAA;AACA,aAAA,KAAA,CAAA,KAAA,CAAA,UAAA,GAAA,KAAA;AACA,aAAA,KAAA,CAAA,KAAA,CAAA,aAAA,GAAA,KAAA;AACA;AAEA;;;AACA,UAAA,QAAA,CAAA,WAAA,EAAA;AACA;AACA,YAAA,IAAA,GAAA,KAAA,MAAA,CAAA,MAAA,CAAA,QAAA,CAAA,iBAAA,CAAA,aAAA,KAAA,KAAA,MAAA,CAAA,MAAA,CAAA,iCAAA;AACA,aAAA,KAAA,CAAA,GAAA,kBAAA,IAAA,qBAAA,QAAA,CAAA,WAAA;;AACA,aAAA,KAAA,CAAA,OAAA,GAAA;AAAA,iBAAA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,MAAA,EAAA;AAAA,SAAA;;AAEA,YAAA,CAAA,KAAA,KAAA,EAAA,KAAA,KAAA,CAAA,IAAA;AACA,OAPA,MASA;AACA,YAAA,IAAA,GAAA,EAAA,CADA,CACA;;AAEA;;AACA,aAAA,IAAA,SAAA,IAAA,QAAA,CAAA,WAAA,CAAA,mBAAA,EAAA;AACA,cAAA,QAAA,CAAA,WAAA,CAAA,mBAAA,CAAA,SAAA,EAAA,IAAA,EAAA,IAAA,cAAA,QAAA,CAAA,WAAA,CAAA,mBAAA,CAAA,SAAA,EAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,OAAA;AACA,cAAA,QAAA,CAAA,WAAA,CAAA,mBAAA,CAAA,SAAA,EAAA,eAAA,IAAA,QAAA,CAAA,WAAA,CAAA,mBAAA,CAAA,SAAA,EAAA,eAAA,CAAA,eAAA,CAAA,CAAA,EAAA,YAAA,EAAA,IAAA,cAAA,QAAA,CAAA,WAAA,CAAA,mBAAA,CAAA,SAAA,EAAA,eAAA,CAAA,eAAA,CAAA,CAAA,EAAA,YAAA,OAAA;AACA,cAAA,QAAA,CAAA,WAAA,CAAA,mBAAA,CAAA,SAAA,EAAA,OAAA,EAAA,IAAA,cAAA,QAAA,CAAA,WAAA,CAAA,mBAAA,CAAA,SAAA,EAAA,OAAA,CAAA,IAAA,OAAA;AACA;AAEA;;;AACA,YAAA,QAAA,CAAA,WAAA,CAAA,cAAA,IAAA,QAAA,CAAA,WAAA,CAAA,cAAA,CAAA,MAAA,EAAA;AACA,eAAA,IAAA,WAAA,IAAA,QAAA,CAAA,WAAA,CAAA,cAAA,CAAA,MAAA,CAAA,YAAA,CAAA,KAAA,EAAA;AACA,gBAAA,QAAA,CAAA,WAAA,CAAA,cAAA,CAAA,MAAA,CAAA,YAAA,CAAA,KAAA,CAAA,WAAA,EAAA,cAAA,IAAA,QAAA,CAAA,WAAA,CAAA,cAAA,CAAA,MAAA,CAAA,YAAA,CAAA,KAAA,CAAA,WAAA,EAAA,cAAA,CAAA,YAAA,EAAA,IAAA,cAAA,QAAA,CAAA,WAAA,CAAA,cAAA,CAAA,MAAA,CAAA,YAAA,CAAA,KAAA,CAAA,WAAA,EAAA,cAAA,CAAA,YAAA,OAAA;AACA;AACA;;AAEA,YAAA,MAAA,GAAA,IAAA,wBAAA,CAAA,IAAA,CAAA;AACA,QAAA,MAAA,CAAA,QAAA,GAAA,KAAA,MAAA,CAAA,KAAA;AACA,QAAA,MAAA,CAAA,IAAA,GAAA,KAAA,IAAA,EAAA;;AACA,QAAA,MAAA,CAAA,KAAA,GAAA;AAAA,iBAAA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,MAAA,EAAA;AAAA,SAAA;;AAEA,YAAA,CAAA,KAAA,KAAA,EAAA,MAAA,CAAA,eAAA,CAAA,KAAA,CAAA,MAAA,EAtBA,CAsBA;AACA;AACA,KA3FA;;AA4FA;AACA,IAAA,aA7FA,2BA6FA;AACA,UAAA,MAAA,CAAA,eAAA,EAAA,MAAA,CAAA,eAAA,CAAA,MAAA;AACA,UAAA,KAAA,KAAA,IAAA,CAAA,KAAA,KAAA,CAAA,MAAA,EAAA,KAAA,KAAA,CAAA,KAAA;AACA;AAhGA;AA3HA,CAAA","sourcesContent":["<template>\n    <main id=\"app\">\n        <!-- TopHead is the header with the information about the app -->\n        <TopHead v-if=\"agent && messages.length > 0\" :agent=\"agent\">\n            <!-- Audio toggle (on the top right corner), used to toggle the audio output, default mode is defined in the settings -->\n            <TopHeadAction\n                :title=\"muted ? (translations[lang()] && translations[lang()].unMuteTitle) || translations[config.fallback_lang].unMuteTitle : (translations[lang()] && translations[lang()].muteTitle) || translations[config.fallback_lang].muteTitle\"\n                :icon=\"muted ? 'volume_off': 'volume_up'\"\n                @click.native=\"muted = !muted\"\n            />\n        </TopHead>\n        <section class=\"chat\">\n            <!-- Error component is for displaying errors -->\n            <ErrorMessage v-if=\"error\" :message=\"error\" />\n\n            <!-- Welcome component is for onboarding experience and language picker -->\n            <WelcomeView v-if=\"agent && messages.length == 0\" :agent=\"agent\" />\n\n            <!-- Messages Table -->\n            <section v-else aria-live=\"polite\">\n                <div v-for=\"message in messages\" id=\"message\" :key=\"message.responseId\">\n                    <!-- My message -->\n                    <RichComponent me><RichBubble v-if=\"message.queryResult.queryText\" :text=\"message.queryResult.queryText\" me /></RichComponent>\n\n                    <!-- Dialogflow Components -->\n                    <RichComponent v-for=\"(component, component_id) in message.queryResult.fulfillmentMessages\" :key=\"component_id\" :fullwidth=\"component.carouselSelect !== undefined || component.rbmCarouselRichCard !== undefined || component.payload && component.payload.richContent !== undefined\">\n                        <!-- Text (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#Text) -->\n                        <RichBubble v-if=\"component.text\" :text=\"component.text.text[0] || ((translations[lang()] && translations[lang()].noContent) || translations[config.fallback_lang].noContent)\" />\n\n                        <!-- SimpleResponses (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#SimpleResponses) -->\n                        <RichBubble\n                            v-if=\"component.simpleResponses\"\n                            :text=\"component.simpleResponses.simpleResponses[0].displayText || component.simpleResponses.simpleResponses[0].textToSpeech || ((translations[lang()] && translations[lang()].noContent) || translations[config.fallback_lang].noContent)\"\n                        />\n\n                        <!-- RbmText (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#rbmtext) -->\n                        <div v-if=\"component.rbmText\">\n                            <RichBubble :text=\"component.rbmText.text || ((translations[lang()] && translations[lang()].noContent) || translations[config.fallback_lang].noContent)\" />\n                            <div v-for=\"(suggestion, suggestion_id) in component.rbmText.rbmSuggestion\" :key=\"suggestion_id\">\n                                <RichCardButton\n                                    v-if=\"suggestion.reply\"\n                                    :title=\"suggestion.reply.text\"\n                                    @click.native=\"send({text: suggestion.reply.text.postbackData})\"\n                                />\n\n                                <RichCardButton\n                                    v-if=\"suggestion.action\"\n                                    :title=\"suggestion.action.text\"\n                                    :uri=\"suggestion.action.openUrl.uri\"\n                                />\n                            </div>\n                        </div>\n\n                        <!-- RichCard (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#RichCard) -->\n                        <RichCard\n                            v-if=\"component.card\"\n                            :title=\"component.card.title\"\n                            :subtitle=\"component.card.subtitle\"\n                            :image-uri=\"component.card.imageUri\">\n                            <RichCardButton\n                                v-for=\"(button, button_id) in component.card.buttons\"\n                                :key=\"button_id\"\n                                :uri=\"button.postback\"\n                                :title=\"button.text\"\n                            />\n                        </RichCard>\n\n                        <!-- BasicCard (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#BasicCard) -->\n                        <RichCard\n                            v-if=\"component.basicCard\"\n                            :title=\"component.basicCard.title\"\n                            :subtitle=\"component.basicCard.subtitle\"\n                            :image-uri=\"component.basicCard.image.imageUri\"\n                            :image-title=\"component.basicCard.image.accessibilityText\"\n                            :text=\"component.basicCard.formattedText\">\n                            <RichCardButton\n                                v-for=\"(button, button_id) in component.basicCard.buttons\"\n                                :key=\"button_id\"\n                                :uri=\"button.openUriAction.uri\"\n                                :title=\"button.title\"\n                            />\n                        </RichCard>\n\n                        <!-- RbmStandaloneCard (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#rbmstandalonecard) -->\n                        <RichCard\n                            v-if=\"component.rbmStandaloneRichCard\"\n                            :title=\"component.rbmStandaloneRichCard.cardContent.title\"\n                            :image-uri=\"component.rbmStandaloneRichCard.cardContent.media.fileUri\"\n                            :text=\"component.rbmStandaloneRichCard.cardContent.description\">\n                            <div v-for=\"(suggestion, suggestion_id) in component.rbmStandaloneRichCard.cardContent.suggestions\" :key=\"suggestion_id\">\n                                <RichCardButton\n                                    v-if=\"suggestion.reply\"\n                                    :title=\"suggestion.reply.text\"\n                                    @click.native=\"send({text: suggestion.reply.text.postbackData})\"\n                                />\n                                <RichCardButton\n                                    v-if=\"suggestion.action\"\n                                    :title=\"suggestion.action.text\"\n                                    :uri=\"suggestion.action.openUrl.uri\"\n                                />\n                            </div>\n                        </RichCard>\n\n                        <!-- CarouselSelect (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#CarouselSelect) -->\n                        <RichCarousel v-if=\"component.carouselSelect\">\n                            <RichCard\n                                v-for=\"item in component.carouselSelect.items\"\n                                :key=\"item.info.key\"\n                                :title=\"item.title\"\n                                :image-uri=\"item.image.imageUri\"\n                                :image-title=\"item.image.accessibilityText\"\n                                :text=\"item.description\"\n                                @click.native=\"send({text: item.info.key})\"\n                            />\n                        </RichCarousel>\n\n                        <!-- RbmCarouselCard (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#rbmcarouselcard) -->\n                        <RichCarousel v-if=\"component.rbmCarouselRichCard\">\n                            <RichCard\n                                v-for=\"(card, card_id) in component.rbmCarouselRichCard.cardContents\"\n                                :key=\"card_id\"\n                                :title=\"card.title\"\n                                :image-uri=\"card.media.fileUri\"\n                                :text=\"card.description\">\n                                <div v-for=\"(suggestion, suggestion_id) in card.suggestions\" :key=\"suggestion_id\">\n                                    <RichCardButton\n                                        v-if=\"suggestion.reply\"\n                                        :title=\"suggestion.reply.text\"\n                                        @click.native=\"send({text: suggestion.reply.text.postbackData})\"\n                                    />\n                                    <RichCardButton\n                                        v-if=\"suggestion.action\"\n                                        :title=\"suggestion.action.text\"\n                                        :uri=\"suggestion.action.openUrl.uri\"\n                                    />\n                                </div>\n                            </RichCard>\n                        </RichCarousel>\n\n                        <!-- ListSelect (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#ListSelect) -->\n                        <RichList\n                            v-if=\"component.listSelect\"\n                            :title=\"component.listSelect.title\"\n                            :subtitle=\"component.listSelect.subtitle\">\n                            <RichListItem\n                                v-for=\"item in component.listSelect.items\"\n                                :key=\"item.info.key\"\n                                :title=\"item.title\"\n                                :description=\"item.description\"\n                                :image-uri=\"item.image.imageUri\"\n                                :image-title=\"item.image.accessibilityText\"\n                                @click.native=\"send({text: item.info.key})\"\n                            />\n                        </RichList>\n\n                        <!-- Image (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#Image) -->\n                        <RichPicture v-if=\"component.image\" :uri=\"component.image.imageUri\" :title=\"component.image.accessibilityText\" />\n\n                        <!-- RichMedia (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#MediaContent) -->\n                        <div v-if=\"component.mediaContent && component.mediaContent.mediaObjects\">\n                            <RichMedia\n                                v-for=\"(media, media_id) in component.mediaContent.mediaObjects\"\n                                :key=\"media_id\"\n                                :name=\"media.name\"\n                                :description=\"media.description\"\n                                :icon-uri=\"media.icon ? media.icon.imageUri : media.largeImage.imageUri\"\n                                :icon-title=\"media.icon ? media.icon.accessibilityText : media.largeImage.accessibilityText\"\n                                :uri=\"media.contentUrl\"\n                            />\n                        </div>\n\n                        <!-- RichTableCard (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#tablecard) -->\n                        <RichTableCard\n                            v-if=\"component.tableCard\"\n                            :title=\"component.tableCard.title\"\n                            :subtitle=\"component.tableCard.subtitle\"\n                            :image-uri=\"component.tableCard.image.imageUri\"\n                            :image-title=\"component.tableCard.image.accessibilityText\"\n                            :header=\"component.tableCard.columnProperties\"\n                            :rows=\"component.tableCard.rows\">\n                            <RichCardButton\n                                v-for=\"(button, button_id) in component.tableCard.buttons\"\n                                :key=\"button_id\"\n                                :uri=\"button.openUriAction.uri\"\n                                :title=\"button.title\"\n                            />\n                        </RichTableCard>\n\n                        <!-- Dialogflow Messenger Components -->\n                        <section v-if=\"component.payload && component.payload.richContent\">\n                            <div v-for=\"(stack, stack_id) in component.payload.richContent\" :key=\"stack_id\">\n                                <RichComponent v-for=\"(item, item_id) in stack\" :key=\"item_id\">\n                                    <!-- Info response type (https://cloud.google.com/dialogflow/docs/integrations/dialogflow-messenger#info_response_type) -->\n                                    <RichCard\n                                        v-if=\"item.type == 'info'\"\n                                        :title=\"item.title\"\n                                        :subtitle=\"item.subtitle\"\n                                        :image-uri=\"item.image.src.rawUrl\">\n                                        <RichCardButton :uri=\"item.actionLink\" />\n                                    </RichCard>\n\n                                    <!-- Description response type (https://cloud.google.com/dialogflow/docs/integrations/dialogflow-messenger#description_response_type) -->\n                                    <RichCard\n                                        v-if=\"item.type == 'description'\"\n                                        :title=\"item.title\"\n                                        :text=\"item.text.join(' ')\"\n                                    />\n\n                                    <!-- Image response type (https://cloud.google.com/dialogflow/docs/integrations/dialogflow-messenger#image_response_type) -->\n                                    <RichPicture v-if=\"item.type == 'image'\" :uri=\"item.rawUrl\" :title=\"item.accessibilityText\" />\n\n                                    <!-- Button response type (https://cloud.google.com/dialogflow/docs/integrations/dialogflow-messenger#button_response_type) -->\n                                    <RichCardButton v-if=\"item.type == 'button'\" :uri=\"item.link\" :title=\"item.text\" />\n\n                                    <!-- List response type (https://cloud.google.com/dialogflow/docs/integrations/dialogflow-messenger#list_response_type) -->\n                                    <RichListItem\n                                        v-if=\"item.type == 'list'\"\n                                        :title=\"item.title\"\n                                        :description=\"item.subtitle\"\n                                        @click.native=\"send({text: item.title})\"\n                                    />\n\n                                    <!-- Accordion response type (https://cloud.google.com/dialogflow/docs/integrations/dialogflow-messenger#accordion_response_type) -->\n                                    <RichCard\n                                        v-if=\"item.type == 'accordion'\"\n                                        :title=\"item.title\"\n                                        :subtitle=\"item.subtitle\"\n                                        :image-uri=\"item.image.src.rawUrl\"\n                                        :text=\"item.text\"\n                                    />\n                                </RichComponent>\n                            </div>\n                        </section>\n                    </RichComponent>\n\n                    <!-- Actions on Google Components -->\n                    <section v-if=\"message.queryResult.webhookPayload && message.queryResult.webhookPayload.google\">\n                        <RichComponent v-for=\"(component, component_id) in message.queryResult.webhookPayload.google.richResponse.items\" :key=\"component_id\">\n                            <!-- Simple response (https://developers.google.com/actions/assistant/responses#simple_response) -->\n                            <RichBubble\n                                v-if=\"component.simpleResponse\"\n                                :text=\"component.simpleResponse.displayText || component.simpleResponse.textToSpeech || ((translations[lang()] && translations[lang()].noContent) || translations[config.fallback_lang].noContent)\"\n                            />\n\n                            <!-- Basic card (https://developers.google.com/actions/assistant/responses#basic_card) -->\n                            <RichCard\n                                v-if=\"component.basicCard\"\n                                :title=\"component.basicCard.title\"\n                                :subtitle=\"component.basicCard.subtitle\"\n                                :image-uri=\"component.basicCard.image.url\"\n                                :image-title=\"component.basicCard.image.accessibilityText\"\n                                :text=\"component.basicCard.formattedText\">\n                                <RichCardButton\n                                    v-for=\"(button, button_id) in component.basicCard.buttons\"\n                                    :key=\"button_id\"\n                                    :uri=\"button.openUrlAction.url\"\n                                    :title=\"button.title\"\n                                />\n                            </RichCard>\n\n                            <!-- Browsing RichCarousel (https://developers.google.com/actions/assistant/responses#browsing_carousel) -->\n                            <RichList v-if=\"component.carouselBrowse\">\n                                <RichListItem\n                                    v-for=\"(item, item_id) in component.carouselBrowse.items\"\n                                    :key=\"item_id\"\n                                    :uri=\"item.openUrlAction.url\"\n                                    :title=\"item.title\"\n                                    :description=\"item.description\"\n                                    :footer=\"item.footer\"\n                                    :image-uri=\"item.image.url\"\n                                    :image-title=\"item.image.accessibilityText\"\n                                />\n                            </RichList>\n\n                            <!-- RichMedia responses (https://developers.google.com/actions/assistant/responses#media_responses) -->\n                            <div v-if=\"component.mediaResponse && component.mediaResponse.mediaObjects\">\n                                <RichMedia\n                                    v-for=\"(media, media_id) in component.mediaResponse.mediaObjects\"\n                                    :key=\"media_id\"\n                                    :name=\"media.name\"\n                                    :description=\"media.description\"\n                                    :icon-uri=\"media.icon.url\"\n                                    :icon-title=\"media.icon.accessibilityText\"\n                                    :uri=\"media.contentUrl\"\n                                />\n                            </div>\n\n                            <!-- Table cards (https://developers.google.com/actions/assistant/responses#table_cards) -->\n                            <RichTableCard\n                                v-if=\"component.tableCard\"\n                                :title=\"component.tableCard.title\"\n                                :subtitle=\"component.tableCard.subtitle\"\n                                :image-uri=\"component.tableCard.image.url\"\n                                :image-title=\"component.tableCard.image.accessibilityText\"\n                                :header=\"component.tableCard.columnProperties\"\n                                :rows=\"component.tableCard.rows\">\n                                <RichCardButton\n                                    v-for=\"(button, button_id) in component.tableCard.buttons\"\n                                    :key=\"button_id\"\n                                    :uri=\"button.openUrlAction.url\"\n                                    :title=\"button.title\"\n                                />\n                            </RichTableCard>\n                        </RichComponent>\n\n                        <!-- Visual Selection Responses (https://developers.google.com/actions/assistant/responses#visual_selection_responses) -->\n                        <RichComponent v-for=\"(component, component_id) in message.queryResult.webhookPayload.google.systemIntent\" :key=\"component_id\" :fullwidth=\"component.carouselSelect !== undefined\">\n                            <!-- RichList (https://developers.google.com/actions/assistant/responses#list) -->\n                            <RichList\n                                v-if=\"component.listSelect\"\n                                :title=\"component.listSelect.title\"\n                                :subtitle=\"component.listSelect.subtitle\">\n                                <RichListItem\n                                    v-for=\"item in component.listSelect.items\"\n                                    :key=\"item.optionInfo.key\"\n                                    :title=\"item.title\"\n                                    :description=\"item.description\"\n                                    :image-uri=\"item.image.url\"\n                                    :image-title=\"item.image.accessibilityText\"\n                                    @click.native=\"send({text: item.optionInfo.key})\"\n                                />\n                            </RichList>\n\n                            <!-- RichCarousel (https://developers.google.com/actions/assistant/responses#carousel) -->\n                            <RichCarousel v-if=\"component.carouselSelect\">\n                                <RichCard\n                                    v-for=\"item in component.carouselSelect.items\"\n                                    :key=\"item.optionInfo.key\"\n                                    :title=\"item.title\"\n                                    :image-uri=\"item.image.url\"\n                                    :image-title=\"item.image.accessibilityText\"\n                                    :text=\"item.description\"\n                                    @click.native=\"send({text: item.optionInfo.key})\"\n                                />\n                            </RichCarousel>\n                        </RichComponent>\n                    </section>\n\n                    <!-- Status Message -->\n                    <RichComponent><RichBubble v-if=\"message.queryResult.diagnosticInfo && message.queryResult.diagnosticInfo.end_conversation\" :text=\"(translations[lang()] && translations[lang()].conversationEnd) || translations[config.fallback_lang].conversationEnd\" /></RichComponent>\n                </div>\n                <div v-if=\"loading\" id=\"message\">\n                    <!-- My message (Loading) -->\n                    <RichComponent me><RichBubble aria-hidden=\"true\" me loading /></RichComponent>\n\n                    <!-- Default / Webhook bubble (Loading) -->\n                    <RichComponent><RichBubble aria-hidden=\"true\" loading /></RichComponent>\n                </div>\n            </section>\n        </section>\n\n        <!-- ChatField is made for submitting queries and displaying suggestions -->\n        <ChatField ref=\"input\" @submit=\"send\" @listening=\"stop_feedback\" @typing=\"stop_feedback\">\n            <!-- RichSuggesion chips\n                https://developers.google.com/actions/assistant/responses#suggestion_chips\n                https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#QuickReplies\n                https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#Suggestions\n            -->\n            <RichSuggesion\n                v-for=\"(suggestion, suggestion_id) in suggestions.text_suggestions\"\n                :key=\"'text-' + suggestion_id\"\n                :title=\"suggestion\"\n                @click.native=\"send({text: suggestion})\"\n            />\n\n            <!-- Link suggestion chips\n                https://developers.google.com/actions/assistant/responses#suggestion_chips\n                https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#LinkOutSuggestion\n                https://cloud.google.com/dialogflow/docs/integrations/dialogflow-messenger#suggestion_chip_response_type\n            -->\n            <RichSuggesion\n                v-for=\"(suggestion, suggestion_id) in suggestions.link_suggestions\"\n                :key=\"'link-' + suggestion_id\"\n                :title=\"suggestion.destinationName || suggestion.text\"\n                :uri=\"suggestion.uri || suggestion.url || suggestion.link\"\n            />\n        </ChatField>\n    </main>\n</template>\n\n<style lang=\"sass\">\n@import '@/style/theme.sass'\n\nbody\n    margin: 0\n    padding: 0\n    font-family: var(--font)\n    font-display: swap\n    background-color: var(--background)\n\n.chat\n    max-width: var(--container-width)\n    margin: auto auto\n    padding: 70px 12px 112px 12px\n</style>\n\n<script>\nimport WelcomeView from '@/views/WelcomeView.vue'\n\nimport ErrorMessage from '@/components/ErrorMessage.vue'\nimport TopHead from '@/components/TopHead.vue'\nimport TopHeadAction from '@/components/TopHeadAction.vue'\nimport ChatField from '@/components/ChatField.vue'\n\nimport RichComponent from '@/components/RichComponent.vue'\nimport RichBubble from '@/components/RichBubble.vue'\nimport RichCard from '@/components/RichCard.vue'\nimport RichCardButton from '@/components/RichCardButton.vue'\nimport RichCarousel from '@/components/RichCarousel.vue'\nimport RichList from '@/components/RichList.vue'\nimport RichListItem from '@/components/RichListItem.vue'\nimport RichPicture from '@/components/RichPicture.vue'\nimport RichMedia from '@/components/RichMedia.vue'\nimport RichTableCard from '@/components/RichTableCard.vue'\nimport RichSuggesion from '@/components/RichSuggestion.vue'\n\nimport * as uuidv1 from 'uuid/v1'\n\nimport { Client } from 'dialogflow-gateway'\n\nexport default {\n    name: 'App',\n    components: {\n        WelcomeView,\n        ErrorMessage,\n        TopHead,\n        TopHeadAction,\n        ChatField,\n        RichComponent,\n        RichBubble,\n        RichCard,\n        RichCardButton,\n        RichCarousel,\n        RichList,\n        RichListItem,\n        RichPicture,\n        RichMedia,\n        RichTableCard,\n        RichSuggesion\n    },\n    data(){\n        return {\n            agent: null,\n            messages: [],\n            language: '',\n            session: '',\n            muted: true,\n            loading: false,\n            error: null,\n            client: new Client(this.config.endpoint),\n            audio: new Audio()\n        }\n    },\n    computed: {\n        /* The code below is used to extract suggestions from last message, to display it on ChatInput */\n        suggestions(){\n            if (this.messages.length > 0){\n                const last_message = this.messages[this.messages.length - 1]\n                const text_suggestions = []\n                const link_suggestions = []\n\n                /* Dialogflow Suggestions */\n                for (const component in last_message.queryResult.fulfillmentMessages){\n                    if (last_message.queryResult.fulfillmentMessages[component].suggestions) text_suggestions.push(...last_message.queryResult.fulfillmentMessages[component].suggestions.suggestions.map(suggestion => suggestion.title))\n                    if (last_message.queryResult.fulfillmentMessages[component].linkOutSuggestion) link_suggestions.push(last_message.queryResult.fulfillmentMessages[component].linkOutSuggestion)\n                    if (last_message.queryResult.fulfillmentMessages[component].quickReplies) text_suggestions.push(...last_message.queryResult.fulfillmentMessages[component].quickReplies.quickReplies)\n                    if (last_message.queryResult.fulfillmentMessages[component].payload && last_message.queryResult.fulfillmentMessages[component].payload.richContent){\n                        last_message.queryResult.fulfillmentMessages[component].payload.richContent.forEach(stack => {\n                            const chips = stack.find(item => item.type == 'chips')\n                            if (chips) link_suggestions.push(...chips.options)\n                        })\n                    }\n                }\n\n                /* Google Suggestions */\n                if (last_message.queryResult.webhookPayload && last_message.queryResult.webhookPayload.google){\n                    for (const component in last_message.queryResult.webhookPayload.google){\n                        if (last_message.queryResult.webhookPayload.google[component].suggestions) text_suggestions.push(...last_message.queryResult.webhookPayload.google[component].suggestions.map(suggestion => suggestion.title))\n                        if (last_message.queryResult.webhookPayload.google[component].linkOutSuggestion) link_suggestions.push(last_message.queryResult.webhookPayload.google[component].linkOutSuggestion)\n                    }\n                }\n\n                return {text_suggestions, link_suggestions}\n            }\n\n            return {\n                text_suggestions: this.config.start_suggestions // <- if no messages are present, return start_suggestions, from config.js to help user figure out what he can do with your application\n            }\n        }\n    },\n    watch: {\n        /* This function is triggered, when new messages arrive */\n        messages(messages){\n            if (this.history()) sessionStorage.setItem('message_history', JSON.stringify(messages)) // <- Save history if the feature is enabled\n        },\n        /* This function is triggered, when request is started or finished */\n        loading(){\n            setTimeout(() => {\n                const app = document.querySelector('#app') // <- We need to scroll down #app, to prevent the whole page jumping to bottom, when using in iframe\n                if (app.querySelector('#message')){\n                    const message = app.querySelectorAll('#message')[app.querySelectorAll('#message').length - 1].offsetTop - 70\n                    window.scrollTo({top: message, behavior: 'smooth'})\n                }\n            }, 2) // <- wait for render (timeout) and then smoothly scroll #app down to the last message\n        },\n        /* If muted, stop playing feedback */\n        muted(muted){\n            this.audio.muted = muted\n            if (muted) this.stop_feedback()\n        }\n    },\n    created(){\n        /* If history is enabled, the messages are retrieved from sessionStorage */\n        if (this.history() && sessionStorage.getItem('message_history') !== null){\n            this.messages = JSON.parse(sessionStorage.getItem('message_history'))\n        }\n\n        /* Session should be persistent (in case of page reload, the context should stay) */\n        if (this.history() && sessionStorage.getItem('session') !== null){\n            this.session = sessionStorage.getItem('session')\n        }\n\n        else {\n            this.session = uuidv1()\n            if (this.history()) sessionStorage.setItem('session', this.session)\n        }\n\n        /* Cache Agent (this will save bandwith) */\n        if (this.history() && sessionStorage.getItem('agent') !== null){\n            this.agent = JSON.parse(sessionStorage.getItem('agent'))\n        }\n\n        else {\n            this.client.get()\n            .then(agent => {\n                this.agent = agent\n                if (this.history()) sessionStorage.setItem('agent', JSON.stringify(agent))\n            })\n            .catch(error => {\n                this.error = error.message\n            })\n        }\n    },\n    methods: {\n        send(submission){\n            let request\n\n            /* Text request */\n            if (submission.text){\n                request = {\n                    session: this.session,\n                    queryInput: {\n                        text: {\n                            text: submission.text,\n                            languageCode: this.lang()\n                        }\n                    }\n                }\n            }\n\n            /* Audio request */\n            else if (submission.audio){\n                this.muted = false\n\n                request = {\n                    session: this.session,\n                    queryInput: {\n                        audioConfig: {\n                            audioEncoding: 'AUDIO_ENCODING_UNSPECIFIED',\n                            languageCode: this.lang()\n                        }\n                    },\n                    inputAudio: submission.audio\n                }\n            }\n\n            this.stop_feedback()\n            this.loading = true\n            this.error = null\n\n            /* Send the request to endpoint */\n            this.client.send(request)\n            .then(response => {\n                this.messages.push(response)\n                this.handle(response) // <- trigger the handle function (explanation below)\n                if (this.debug()) console.log(response) // <- log responses in development mode\n            })\n            .catch(error => {\n                this.error = error.message\n            })\n            .then(() => this.loading = false)\n        },\n        handle(response){\n            /* Handle dialog end */\n            if (response.queryResult.diagnosticInfo && response.queryResult.diagnosticInfo.end_conversation){\n                this.$refs.input.disabled = true\n                this.$refs.input.microphone = false\n                this.$refs.input.should_listen = false\n            }\n\n            /* Speech output */\n            if (response.outputAudio){\n                /* Detect MIME type (or fallback to default) */\n                const mime = this.config.codecs[response.outputAudioConfig.audioEncoding] || this.config.codecs.OUTPUT_AUDIO_ENCODING_UNSPECIFIED\n                this.audio.src = `data:${mime};base64,${response.outputAudio}`\n                this.audio.onended = () => this.$refs.input.listen()\n\n                if (!this.muted) this.audio.play()\n            }\n\n            else {\n                let text = '' // <- init a text variable\n\n                /* Dialogflow Text/SimpleResponses */\n                for (const component in response.queryResult.fulfillmentMessages){\n                    if (response.queryResult.fulfillmentMessages[component].text) text += `${response.queryResult.fulfillmentMessages[component].text.text[0]}. `\n                    if (response.queryResult.fulfillmentMessages[component].simpleResponses && response.queryResult.fulfillmentMessages[component].simpleResponses.simpleResponses[0].textToSpeech) text += `${response.queryResult.fulfillmentMessages[component].simpleResponses.simpleResponses[0].textToSpeech}. `\n                    if (response.queryResult.fulfillmentMessages[component].rbmText) text += `${response.queryResult.fulfillmentMessages[component].rbmText.text}. `\n                }\n\n                /* Actions on Google Simple response */\n                if (response.queryResult.webhookPayload && response.queryResult.webhookPayload.google){\n                    for (const component in response.queryResult.webhookPayload.google.richResponse.items){\n                        if (response.queryResult.webhookPayload.google.richResponse.items[component].simpleResponse && response.queryResult.webhookPayload.google.richResponse.items[component].simpleResponse.textToSpeech) text += `${response.queryResult.webhookPayload.google.richResponse.items[component].simpleResponse.textToSpeech}. `\n                    }\n                }\n\n                const speech = new SpeechSynthesisUtterance(text)\n                speech.voiceURI = this.config.voice\n                speech.lang = this.lang()\n                speech.onend = () => this.$refs.input.listen()\n\n                if (!this.muted) window.speechSynthesis.speak(speech) // <- if app is not muted, speak out the speech\n            }\n        },\n        /* Stop audio speech/playback */\n        stop_feedback(){\n            if (window.speechSynthesis) window.speechSynthesis.cancel()\n            if (this.audio && !this.audio.paused) this.audio.pause()\n        }\n    }\n}\n</script>\n"],"sourceRoot":"src"}]}