{"remainingRequest":"C:\\dialogflow-web-v2-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\dialogflow-web-v2-master\\src\\App.vue?vue&type=style&index=0&lang=sass&","dependencies":[{"path":"C:\\dialogflow-web-v2-master\\src\\App.vue","mtime":1612196699000},{"path":"C:\\dialogflow-web-v2-master\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\dialogflow-web-v2-master\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\dialogflow-web-v2-master\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\dialogflow-web-v2-master\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\dialogflow-web-v2-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\dialogflow-web-v2-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCAnQC9zdHlsZS90aGVtZS5zYXNzJwoKYm9keQogICAgbWFyZ2luOiAwCiAgICBwYWRkaW5nOiAwCiAgICBmb250LWZhbWlseTogdmFyKC0tZm9udCkKICAgIGZvbnQtZGlzcGxheTogc3dhcAogICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFja2dyb3VuZCkKCi5jaGF0CiAgICBtYXgtd2lkdGg6IHZhcigtLWNvbnRhaW5lci13aWR0aCkKICAgIG1hcmdpbjogYXV0byBhdXRvCiAgICBwYWRkaW5nOiA3MHB4IDEycHggMTEycHggMTJweAo="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6XA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n    <main id=\"app\">\n        <!-- TopHead is the header with the information about the app -->\n        <TopHead v-if=\"agent && messages.length > 0\" :agent=\"agent\">\n            <!-- Audio toggle (on the top right corner), used to toggle the audio output, default mode is defined in the settings -->\n            <TopHeadAction\n                :title=\"muted ? (translations[lang()] && translations[lang()].unMuteTitle) || translations[config.fallback_lang].unMuteTitle : (translations[lang()] && translations[lang()].muteTitle) || translations[config.fallback_lang].muteTitle\"\n                :icon=\"muted ? 'volume_off': 'volume_up'\"\n                @click.native=\"muted = !muted\"\n            />\n        </TopHead>\n        <section class=\"chat\">\n            <!-- Error component is for displaying errors -->\n            <ErrorMessage v-if=\"error\" :message=\"error\" />\n\n            <!-- Welcome component is for onboarding experience and language picker -->\n            <WelcomeView v-if=\"agent && messages.length == 0\" :agent=\"agent\" />\n\n            <!-- Messages Table -->\n            <section v-else aria-live=\"polite\">\n                <div v-for=\"message in messages\" id=\"message\" :key=\"message.responseId\">\n                    <!-- My message -->\n                    <RichComponent me><RichBubble v-if=\"message.queryResult.queryText\" :text=\"message.queryResult.queryText\" me /></RichComponent>\n\n                    <!-- Dialogflow Components -->\n                    <RichComponent v-for=\"(component, component_id) in message.queryResult.fulfillmentMessages\" :key=\"component_id\" :fullwidth=\"component.carouselSelect !== undefined || component.rbmCarouselRichCard !== undefined || component.payload && component.payload.richContent !== undefined\">\n                        <!-- Text (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#Text) -->\n                        <RichBubble v-if=\"component.text\" :text=\"component.text.text[0] || ((translations[lang()] && translations[lang()].noContent) || translations[config.fallback_lang].noContent)\" />\n\n                        <!-- SimpleResponses (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#SimpleResponses) -->\n                        <RichBubble\n                            v-if=\"component.simpleResponses\"\n                            :text=\"component.simpleResponses.simpleResponses[0].displayText || component.simpleResponses.simpleResponses[0].textToSpeech || ((translations[lang()] && translations[lang()].noContent) || translations[config.fallback_lang].noContent)\"\n                        />\n\n                        <!-- RbmText (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#rbmtext) -->\n                        <div v-if=\"component.rbmText\">\n                            <RichBubble :text=\"component.rbmText.text || ((translations[lang()] && translations[lang()].noContent) || translations[config.fallback_lang].noContent)\" />\n                            <div v-for=\"(suggestion, suggestion_id) in component.rbmText.rbmSuggestion\" :key=\"suggestion_id\">\n                                <RichCardButton\n                                    v-if=\"suggestion.reply\"\n                                    :title=\"suggestion.reply.text\"\n                                    @click.native=\"send({text: suggestion.reply.text.postbackData})\"\n                                />\n\n                                <RichCardButton\n                                    v-if=\"suggestion.action\"\n                                    :title=\"suggestion.action.text\"\n                                    :uri=\"suggestion.action.openUrl.uri\"\n                                />\n                            </div>\n                        </div>\n\n                        <!-- RichCard (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#RichCard) -->\n                        <RichCard\n                            v-if=\"component.card\"\n                            :title=\"component.card.title\"\n                            :subtitle=\"component.card.subtitle\"\n                            :image-uri=\"component.card.imageUri\">\n                            <RichCardButton\n                                v-for=\"(button, button_id) in component.card.buttons\"\n                                :key=\"button_id\"\n                                :uri=\"button.postback\"\n                                :title=\"button.text\"\n                            />\n                        </RichCard>\n\n                        <!-- BasicCard (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#BasicCard) -->\n                        <RichCard\n                            v-if=\"component.basicCard\"\n                            :title=\"component.basicCard.title\"\n                            :subtitle=\"component.basicCard.subtitle\"\n                            :image-uri=\"component.basicCard.image.imageUri\"\n                            :image-title=\"component.basicCard.image.accessibilityText\"\n                            :text=\"component.basicCard.formattedText\">\n                            <RichCardButton\n                                v-for=\"(button, button_id) in component.basicCard.buttons\"\n                                :key=\"button_id\"\n                                :uri=\"button.openUriAction.uri\"\n                                :title=\"button.title\"\n                            />\n                        </RichCard>\n\n                        <!-- RbmStandaloneCard (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#rbmstandalonecard) -->\n                        <RichCard\n                            v-if=\"component.rbmStandaloneRichCard\"\n                            :title=\"component.rbmStandaloneRichCard.cardContent.title\"\n                            :image-uri=\"component.rbmStandaloneRichCard.cardContent.media.fileUri\"\n                            :text=\"component.rbmStandaloneRichCard.cardContent.description\">\n                            <div v-for=\"(suggestion, suggestion_id) in component.rbmStandaloneRichCard.cardContent.suggestions\" :key=\"suggestion_id\">\n                                <RichCardButton\n                                    v-if=\"suggestion.reply\"\n                                    :title=\"suggestion.reply.text\"\n                                    @click.native=\"send({text: suggestion.reply.text.postbackData})\"\n                                />\n                                <RichCardButton\n                                    v-if=\"suggestion.action\"\n                                    :title=\"suggestion.action.text\"\n                                    :uri=\"suggestion.action.openUrl.uri\"\n                                />\n                            </div>\n                        </RichCard>\n\n                        <!-- CarouselSelect (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#CarouselSelect) -->\n                        <RichCarousel v-if=\"component.carouselSelect\">\n                            <RichCard\n                                v-for=\"item in component.carouselSelect.items\"\n                                :key=\"item.info.key\"\n                                :title=\"item.title\"\n                                :image-uri=\"item.image.imageUri\"\n                                :image-title=\"item.image.accessibilityText\"\n                                :text=\"item.description\"\n                                @click.native=\"send({text: item.info.key})\"\n                            />\n                        </RichCarousel>\n\n                        <!-- RbmCarouselCard (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#rbmcarouselcard) -->\n                        <RichCarousel v-if=\"component.rbmCarouselRichCard\">\n                            <RichCard\n                                v-for=\"(card, card_id) in component.rbmCarouselRichCard.cardContents\"\n                                :key=\"card_id\"\n                                :title=\"card.title\"\n                                :image-uri=\"card.media.fileUri\"\n                                :text=\"card.description\">\n                                <div v-for=\"(suggestion, suggestion_id) in card.suggestions\" :key=\"suggestion_id\">\n                                    <RichCardButton\n                                        v-if=\"suggestion.reply\"\n                                        :title=\"suggestion.reply.text\"\n                                        @click.native=\"send({text: suggestion.reply.text.postbackData})\"\n                                    />\n                                    <RichCardButton\n                                        v-if=\"suggestion.action\"\n                                        :title=\"suggestion.action.text\"\n                                        :uri=\"suggestion.action.openUrl.uri\"\n                                    />\n                                </div>\n                            </RichCard>\n                        </RichCarousel>\n\n                        <!-- ListSelect (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#ListSelect) -->\n                        <RichList\n                            v-if=\"component.listSelect\"\n                            :title=\"component.listSelect.title\"\n                            :subtitle=\"component.listSelect.subtitle\">\n                            <RichListItem\n                                v-for=\"item in component.listSelect.items\"\n                                :key=\"item.info.key\"\n                                :title=\"item.title\"\n                                :description=\"item.description\"\n                                :image-uri=\"item.image.imageUri\"\n                                :image-title=\"item.image.accessibilityText\"\n                                @click.native=\"send({text: item.info.key})\"\n                            />\n                        </RichList>\n\n                        <!-- Image (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#Image) -->\n                        <RichPicture v-if=\"component.image\" :uri=\"component.image.imageUri\" :title=\"component.image.accessibilityText\" />\n\n                        <!-- RichMedia (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#MediaContent) -->\n                        <div v-if=\"component.mediaContent && component.mediaContent.mediaObjects\">\n                            <RichMedia\n                                v-for=\"(media, media_id) in component.mediaContent.mediaObjects\"\n                                :key=\"media_id\"\n                                :name=\"media.name\"\n                                :description=\"media.description\"\n                                :icon-uri=\"media.icon ? media.icon.imageUri : media.largeImage.imageUri\"\n                                :icon-title=\"media.icon ? media.icon.accessibilityText : media.largeImage.accessibilityText\"\n                                :uri=\"media.contentUrl\"\n                            />\n                        </div>\n\n                        <!-- RichTableCard (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#tablecard) -->\n                        <RichTableCard\n                            v-if=\"component.tableCard\"\n                            :title=\"component.tableCard.title\"\n                            :subtitle=\"component.tableCard.subtitle\"\n                            :image-uri=\"component.tableCard.image.imageUri\"\n                            :image-title=\"component.tableCard.image.accessibilityText\"\n                            :header=\"component.tableCard.columnProperties\"\n                            :rows=\"component.tableCard.rows\">\n                            <RichCardButton\n                                v-for=\"(button, button_id) in component.tableCard.buttons\"\n                                :key=\"button_id\"\n                                :uri=\"button.openUriAction.uri\"\n                                :title=\"button.title\"\n                            />\n                        </RichTableCard>\n\n                        <!-- Dialogflow Messenger Components -->\n                        <section v-if=\"component.payload && component.payload.richContent\">\n                            <div v-for=\"(stack, stack_id) in component.payload.richContent\" :key=\"stack_id\">\n                                <RichComponent v-for=\"(item, item_id) in stack\" :key=\"item_id\">\n                                    <!-- Info response type (https://cloud.google.com/dialogflow/docs/integrations/dialogflow-messenger#info_response_type) -->\n                                    <RichCard\n                                        v-if=\"item.type == 'info'\"\n                                        :title=\"item.title\"\n                                        :subtitle=\"item.subtitle\"\n                                        :image-uri=\"item.image.src.rawUrl\">\n                                        <RichCardButton :uri=\"item.actionLink\" />\n                                    </RichCard>\n\n                                    <!-- Description response type (https://cloud.google.com/dialogflow/docs/integrations/dialogflow-messenger#description_response_type) -->\n                                    <RichCard\n                                        v-if=\"item.type == 'description'\"\n                                        :title=\"item.title\"\n                                        :text=\"item.text.join(' ')\"\n                                    />\n\n                                    <!-- Image response type (https://cloud.google.com/dialogflow/docs/integrations/dialogflow-messenger#image_response_type) -->\n                                    <RichPicture v-if=\"item.type == 'image'\" :uri=\"item.rawUrl\" :title=\"item.accessibilityText\" />\n\n                                    <!-- Button response type (https://cloud.google.com/dialogflow/docs/integrations/dialogflow-messenger#button_response_type) -->\n                                    <RichCardButton v-if=\"item.type == 'button'\" :uri=\"item.link\" :title=\"item.text\" />\n\n                                    <!-- List response type (https://cloud.google.com/dialogflow/docs/integrations/dialogflow-messenger#list_response_type) -->\n                                    <RichListItem\n                                        v-if=\"item.type == 'list'\"\n                                        :title=\"item.title\"\n                                        :description=\"item.subtitle\"\n                                        @click.native=\"send({text: item.title})\"\n                                    />\n\n                                    <!-- Accordion response type (https://cloud.google.com/dialogflow/docs/integrations/dialogflow-messenger#accordion_response_type) -->\n                                    <RichCard\n                                        v-if=\"item.type == 'accordion'\"\n                                        :title=\"item.title\"\n                                        :subtitle=\"item.subtitle\"\n                                        :image-uri=\"item.image.src.rawUrl\"\n                                        :text=\"item.text\"\n                                    />\n                                </RichComponent>\n                            </div>\n                        </section>\n                    </RichComponent>\n\n                    <!-- Actions on Google Components -->\n                    <section v-if=\"message.queryResult.webhookPayload && message.queryResult.webhookPayload.google\">\n                        <RichComponent v-for=\"(component, component_id) in message.queryResult.webhookPayload.google.richResponse.items\" :key=\"component_id\">\n                            <!-- Simple response (https://developers.google.com/actions/assistant/responses#simple_response) -->\n                            <RichBubble\n                                v-if=\"component.simpleResponse\"\n                                :text=\"component.simpleResponse.displayText || component.simpleResponse.textToSpeech || ((translations[lang()] && translations[lang()].noContent) || translations[config.fallback_lang].noContent)\"\n                            />\n\n                            <!-- Basic card (https://developers.google.com/actions/assistant/responses#basic_card) -->\n                            <RichCard\n                                v-if=\"component.basicCard\"\n                                :title=\"component.basicCard.title\"\n                                :subtitle=\"component.basicCard.subtitle\"\n                                :image-uri=\"component.basicCard.image.url\"\n                                :image-title=\"component.basicCard.image.accessibilityText\"\n                                :text=\"component.basicCard.formattedText\">\n                                <RichCardButton\n                                    v-for=\"(button, button_id) in component.basicCard.buttons\"\n                                    :key=\"button_id\"\n                                    :uri=\"button.openUrlAction.url\"\n                                    :title=\"button.title\"\n                                />\n                            </RichCard>\n\n                            <!-- Browsing RichCarousel (https://developers.google.com/actions/assistant/responses#browsing_carousel) -->\n                            <RichList v-if=\"component.carouselBrowse\">\n                                <RichListItem\n                                    v-for=\"(item, item_id) in component.carouselBrowse.items\"\n                                    :key=\"item_id\"\n                                    :uri=\"item.openUrlAction.url\"\n                                    :title=\"item.title\"\n                                    :description=\"item.description\"\n                                    :footer=\"item.footer\"\n                                    :image-uri=\"item.image.url\"\n                                    :image-title=\"item.image.accessibilityText\"\n                                />\n                            </RichList>\n\n                            <!-- RichMedia responses (https://developers.google.com/actions/assistant/responses#media_responses) -->\n                            <div v-if=\"component.mediaResponse && component.mediaResponse.mediaObjects\">\n                                <RichMedia\n                                    v-for=\"(media, media_id) in component.mediaResponse.mediaObjects\"\n                                    :key=\"media_id\"\n                                    :name=\"media.name\"\n                                    :description=\"media.description\"\n                                    :icon-uri=\"media.icon.url\"\n                                    :icon-title=\"media.icon.accessibilityText\"\n                                    :uri=\"media.contentUrl\"\n                                />\n                            </div>\n\n                            <!-- Table cards (https://developers.google.com/actions/assistant/responses#table_cards) -->\n                            <RichTableCard\n                                v-if=\"component.tableCard\"\n                                :title=\"component.tableCard.title\"\n                                :subtitle=\"component.tableCard.subtitle\"\n                                :image-uri=\"component.tableCard.image.url\"\n                                :image-title=\"component.tableCard.image.accessibilityText\"\n                                :header=\"component.tableCard.columnProperties\"\n                                :rows=\"component.tableCard.rows\">\n                                <RichCardButton\n                                    v-for=\"(button, button_id) in component.tableCard.buttons\"\n                                    :key=\"button_id\"\n                                    :uri=\"button.openUrlAction.url\"\n                                    :title=\"button.title\"\n                                />\n                            </RichTableCard>\n                        </RichComponent>\n\n                        <!-- Visual Selection Responses (https://developers.google.com/actions/assistant/responses#visual_selection_responses) -->\n                        <RichComponent v-for=\"(component, component_id) in message.queryResult.webhookPayload.google.systemIntent\" :key=\"component_id\" :fullwidth=\"component.carouselSelect !== undefined\">\n                            <!-- RichList (https://developers.google.com/actions/assistant/responses#list) -->\n                            <RichList\n                                v-if=\"component.listSelect\"\n                                :title=\"component.listSelect.title\"\n                                :subtitle=\"component.listSelect.subtitle\">\n                                <RichListItem\n                                    v-for=\"item in component.listSelect.items\"\n                                    :key=\"item.optionInfo.key\"\n                                    :title=\"item.title\"\n                                    :description=\"item.description\"\n                                    :image-uri=\"item.image.url\"\n                                    :image-title=\"item.image.accessibilityText\"\n                                    @click.native=\"send({text: item.optionInfo.key})\"\n                                />\n                            </RichList>\n\n                            <!-- RichCarousel (https://developers.google.com/actions/assistant/responses#carousel) -->\n                            <RichCarousel v-if=\"component.carouselSelect\">\n                                <RichCard\n                                    v-for=\"item in component.carouselSelect.items\"\n                                    :key=\"item.optionInfo.key\"\n                                    :title=\"item.title\"\n                                    :image-uri=\"item.image.url\"\n                                    :image-title=\"item.image.accessibilityText\"\n                                    :text=\"item.description\"\n                                    @click.native=\"send({text: item.optionInfo.key})\"\n                                />\n                            </RichCarousel>\n                        </RichComponent>\n                    </section>\n\n                    <!-- Status Message -->\n                    <RichComponent><RichBubble v-if=\"message.queryResult.diagnosticInfo && message.queryResult.diagnosticInfo.end_conversation\" :text=\"(translations[lang()] && translations[lang()].conversationEnd) || translations[config.fallback_lang].conversationEnd\" /></RichComponent>\n                </div>\n                <div v-if=\"loading\" id=\"message\">\n                    <!-- My message (Loading) -->\n                    <RichComponent me><RichBubble aria-hidden=\"true\" me loading /></RichComponent>\n\n                    <!-- Default / Webhook bubble (Loading) -->\n                    <RichComponent><RichBubble aria-hidden=\"true\" loading /></RichComponent>\n                </div>\n            </section>\n        </section>\n\n        <!-- ChatField is made for submitting queries and displaying suggestions -->\n        <ChatField ref=\"input\" @submit=\"send\" @listening=\"stop_feedback\" @typing=\"stop_feedback\">\n            <!-- RichSuggesion chips\n                https://developers.google.com/actions/assistant/responses#suggestion_chips\n                https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#QuickReplies\n                https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#Suggestions\n            -->\n            <RichSuggesion\n                v-for=\"(suggestion, suggestion_id) in suggestions.text_suggestions\"\n                :key=\"'text-' + suggestion_id\"\n                :title=\"suggestion\"\n                @click.native=\"send({text: suggestion})\"\n            />\n\n            <!-- Link suggestion chips\n                https://developers.google.com/actions/assistant/responses#suggestion_chips\n                https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#LinkOutSuggestion\n                https://cloud.google.com/dialogflow/docs/integrations/dialogflow-messenger#suggestion_chip_response_type\n            -->\n            <RichSuggesion\n                v-for=\"(suggestion, suggestion_id) in suggestions.link_suggestions\"\n                :key=\"'link-' + suggestion_id\"\n                :title=\"suggestion.destinationName || suggestion.text\"\n                :uri=\"suggestion.uri || suggestion.url || suggestion.link\"\n            />\n        </ChatField>\n    </main>\n</template>\n\n<style lang=\"sass\">\n@import '@/style/theme.sass'\n\nbody\n    margin: 0\n    padding: 0\n    font-family: var(--font)\n    font-display: swap\n    background-color: var(--background)\n\n.chat\n    max-width: var(--container-width)\n    margin: auto auto\n    padding: 70px 12px 112px 12px\n</style>\n\n<script>\nimport WelcomeView from '@/views/WelcomeView.vue'\n\nimport ErrorMessage from '@/components/ErrorMessage.vue'\nimport TopHead from '@/components/TopHead.vue'\nimport TopHeadAction from '@/components/TopHeadAction.vue'\nimport ChatField from '@/components/ChatField.vue'\n\nimport RichComponent from '@/components/RichComponent.vue'\nimport RichBubble from '@/components/RichBubble.vue'\nimport RichCard from '@/components/RichCard.vue'\nimport RichCardButton from '@/components/RichCardButton.vue'\nimport RichCarousel from '@/components/RichCarousel.vue'\nimport RichList from '@/components/RichList.vue'\nimport RichListItem from '@/components/RichListItem.vue'\nimport RichPicture from '@/components/RichPicture.vue'\nimport RichMedia from '@/components/RichMedia.vue'\nimport RichTableCard from '@/components/RichTableCard.vue'\nimport RichSuggesion from '@/components/RichSuggestion.vue'\n\nimport * as uuidv1 from 'uuid/v1'\n\nimport { Client } from 'dialogflow-gateway'\n\nexport default {\n    name: 'App',\n    components: {\n        WelcomeView,\n        ErrorMessage,\n        TopHead,\n        TopHeadAction,\n        ChatField,\n        RichComponent,\n        RichBubble,\n        RichCard,\n        RichCardButton,\n        RichCarousel,\n        RichList,\n        RichListItem,\n        RichPicture,\n        RichMedia,\n        RichTableCard,\n        RichSuggesion\n    },\n    data(){\n        return {\n            agent: null,\n            messages: [],\n            language: '',\n            session: '',\n            muted: true,\n            loading: false,\n            error: null,\n            client: new Client(this.config.endpoint),\n            audio: new Audio()\n        }\n    },\n    computed: {\n        /* The code below is used to extract suggestions from last message, to display it on ChatInput */\n        suggestions(){\n            if (this.messages.length > 0){\n                const last_message = this.messages[this.messages.length - 1]\n                const text_suggestions = []\n                const link_suggestions = []\n\n                /* Dialogflow Suggestions */\n                for (const component in last_message.queryResult.fulfillmentMessages){\n                    if (last_message.queryResult.fulfillmentMessages[component].suggestions) text_suggestions.push(...last_message.queryResult.fulfillmentMessages[component].suggestions.suggestions.map(suggestion => suggestion.title))\n                    if (last_message.queryResult.fulfillmentMessages[component].linkOutSuggestion) link_suggestions.push(last_message.queryResult.fulfillmentMessages[component].linkOutSuggestion)\n                    if (last_message.queryResult.fulfillmentMessages[component].quickReplies) text_suggestions.push(...last_message.queryResult.fulfillmentMessages[component].quickReplies.quickReplies)\n                    if (last_message.queryResult.fulfillmentMessages[component].payload && last_message.queryResult.fulfillmentMessages[component].payload.richContent){\n                        last_message.queryResult.fulfillmentMessages[component].payload.richContent.forEach(stack => {\n                            const chips = stack.find(item => item.type == 'chips')\n                            if (chips) link_suggestions.push(...chips.options)\n                        })\n                    }\n                }\n\n                /* Google Suggestions */\n                if (last_message.queryResult.webhookPayload && last_message.queryResult.webhookPayload.google){\n                    for (const component in last_message.queryResult.webhookPayload.google){\n                        if (last_message.queryResult.webhookPayload.google[component].suggestions) text_suggestions.push(...last_message.queryResult.webhookPayload.google[component].suggestions.map(suggestion => suggestion.title))\n                        if (last_message.queryResult.webhookPayload.google[component].linkOutSuggestion) link_suggestions.push(last_message.queryResult.webhookPayload.google[component].linkOutSuggestion)\n                    }\n                }\n\n                return {text_suggestions, link_suggestions}\n            }\n\n            return {\n                text_suggestions: this.config.start_suggestions // <- if no messages are present, return start_suggestions, from config.js to help user figure out what he can do with your application\n            }\n        }\n    },\n    watch: {\n        /* This function is triggered, when new messages arrive */\n        messages(messages){\n            if (this.history()) sessionStorage.setItem('message_history', JSON.stringify(messages)) // <- Save history if the feature is enabled\n        },\n        /* This function is triggered, when request is started or finished */\n        loading(){\n            setTimeout(() => {\n                const app = document.querySelector('#app') // <- We need to scroll down #app, to prevent the whole page jumping to bottom, when using in iframe\n                if (app.querySelector('#message')){\n                    const message = app.querySelectorAll('#message')[app.querySelectorAll('#message').length - 1].offsetTop - 70\n                    window.scrollTo({top: message, behavior: 'smooth'})\n                }\n            }, 2) // <- wait for render (timeout) and then smoothly scroll #app down to the last message\n        },\n        /* If muted, stop playing feedback */\n        muted(muted){\n            this.audio.muted = muted\n            if (muted) this.stop_feedback()\n        }\n    },\n    created(){\n        /* If history is enabled, the messages are retrieved from sessionStorage */\n        if (this.history() && sessionStorage.getItem('message_history') !== null){\n            this.messages = JSON.parse(sessionStorage.getItem('message_history'))\n        }\n\n        /* Session should be persistent (in case of page reload, the context should stay) */\n        if (this.history() && sessionStorage.getItem('session') !== null){\n            this.session = sessionStorage.getItem('session')\n        }\n\n        else {\n            this.session = uuidv1()\n            if (this.history()) sessionStorage.setItem('session', this.session)\n        }\n\n        /* Cache Agent (this will save bandwith) */\n        if (this.history() && sessionStorage.getItem('agent') !== null){\n            this.agent = JSON.parse(sessionStorage.getItem('agent'))\n        }\n\n        else {\n            this.client.get()\n            .then(agent => {\n                this.agent = agent\n                if (this.history()) sessionStorage.setItem('agent', JSON.stringify(agent))\n            })\n            .catch(error => {\n                this.error = error.message\n            })\n        }\n    },\n    methods: {\n        send(submission){\n            let request\n\n            /* Text request */\n            if (submission.text){\n                request = {\n                    session: this.session,\n                    queryInput: {\n                        text: {\n                            text: submission.text,\n                            languageCode: this.lang()\n                        }\n                    }\n                }\n            }\n\n            /* Audio request */\n            else if (submission.audio){\n                this.muted = false\n\n                request = {\n                    session: this.session,\n                    queryInput: {\n                        audioConfig: {\n                            audioEncoding: 'AUDIO_ENCODING_UNSPECIFIED',\n                            languageCode: this.lang()\n                        }\n                    },\n                    inputAudio: submission.audio\n                }\n            }\n\n            this.stop_feedback()\n            this.loading = true\n            this.error = null\n\n            /* Send the request to endpoint */\n            this.client.send(request)\n            .then(response => {\n                this.messages.push(response)\n                this.handle(response) // <- trigger the handle function (explanation below)\n                if (this.debug()) console.log(response) // <- log responses in development mode\n            })\n            .catch(error => {\n                this.error = error.message\n            })\n            .then(() => this.loading = false)\n        },\n        handle(response){\n            /* Handle dialog end */\n            if (response.queryResult.diagnosticInfo && response.queryResult.diagnosticInfo.end_conversation){\n                this.$refs.input.disabled = true\n                this.$refs.input.microphone = false\n                this.$refs.input.should_listen = false\n            }\n\n            /* Speech output */\n            if (response.outputAudio){\n                /* Detect MIME type (or fallback to default) */\n                const mime = this.config.codecs[response.outputAudioConfig.audioEncoding] || this.config.codecs.OUTPUT_AUDIO_ENCODING_UNSPECIFIED\n                this.audio.src = `data:${mime};base64,${response.outputAudio}`\n                this.audio.onended = () => this.$refs.input.listen()\n\n                if (!this.muted) this.audio.play()\n            }\n\n            else {\n                let text = '' // <- init a text variable\n\n                /* Dialogflow Text/SimpleResponses */\n                for (const component in response.queryResult.fulfillmentMessages){\n                    if (response.queryResult.fulfillmentMessages[component].text) text += `${response.queryResult.fulfillmentMessages[component].text.text[0]}. `\n                    if (response.queryResult.fulfillmentMessages[component].simpleResponses && response.queryResult.fulfillmentMessages[component].simpleResponses.simpleResponses[0].textToSpeech) text += `${response.queryResult.fulfillmentMessages[component].simpleResponses.simpleResponses[0].textToSpeech}. `\n                    if (response.queryResult.fulfillmentMessages[component].rbmText) text += `${response.queryResult.fulfillmentMessages[component].rbmText.text}. `\n                }\n\n                /* Actions on Google Simple response */\n                if (response.queryResult.webhookPayload && response.queryResult.webhookPayload.google){\n                    for (const component in response.queryResult.webhookPayload.google.richResponse.items){\n                        if (response.queryResult.webhookPayload.google.richResponse.items[component].simpleResponse && response.queryResult.webhookPayload.google.richResponse.items[component].simpleResponse.textToSpeech) text += `${response.queryResult.webhookPayload.google.richResponse.items[component].simpleResponse.textToSpeech}. `\n                    }\n                }\n\n                const speech = new SpeechSynthesisUtterance(text)\n                speech.voiceURI = this.config.voice\n                speech.lang = this.lang()\n                speech.onend = () => this.$refs.input.listen()\n\n                if (!this.muted) window.speechSynthesis.speak(speech) // <- if app is not muted, speak out the speech\n            }\n        },\n        /* Stop audio speech/playback */\n        stop_feedback(){\n            if (window.speechSynthesis) window.speechSynthesis.cancel()\n            if (this.audio && !this.audio.paused) this.audio.pause()\n        }\n    }\n}\n</script>\n"]}]}