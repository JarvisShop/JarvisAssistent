{"remainingRequest":"C:\\dialogflow-web-v2-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\dialogflow-web-v2-master\\src\\App.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\dialogflow-web-v2-master\\src\\App.vue","mtime":1612196699000},{"path":"C:\\dialogflow-web-v2-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\dialogflow-web-v2-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\dialogflow-web-v2-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}